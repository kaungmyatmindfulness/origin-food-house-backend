datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(uuid(7))
  email              String    @unique
  password           String
  name               String?
  verified           Boolean   @default(false)
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  resetToken         String?   @unique
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  userStores UserStore[]
}

model Store {
  id        String   @id @default(uuid(7))
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userStores          UserStore[]
  categories          Category[]
  menuItems           MenuItem[]
  tables              Table[]
  activeTableSessions ActiveTableSession[]
  information         StoreInformation?
  setting             StoreSetting?
  orders              Order[]

  @@index([slug])
}

model UserStore {
  id      String @id @default(uuid(7))
  userId  String
  storeId String
  role    Role

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
}

model StoreInformation {
  id            String   @id @default(uuid(7))
  storeId       String   @unique
  store         Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name          String
  logoUrl       String?
  coverPhotoUrl String?
  address       String?
  phone         String?
  email         String?
  website       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model StoreSetting {
  id                String   @id @default(uuid(7))
  storeId           String   @unique
  store             Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  currency          Currency @default(USD)
  vatRate           Decimal? @default(0.07) @db.Decimal(4, 3)
  serviceChargeRate Decimal? @default(0.0) @db.Decimal(4, 3)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Category {
  id        String    @id @default(uuid(7))
  name      String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  menuItems MenuItem[]

  @@unique([storeId, name, deletedAt])
  @@index([storeId, sortOrder])
  @@index([deletedAt])
}

model MenuItem {
  id           String    @id @default(uuid(7))
  name         String
  description  String?
  basePrice    Decimal   @db.Decimal(10, 2)
  imageUrl     String?
  categoryId   String
  storeId      String
  sortOrder    Int       @default(0)
  isOutOfStock Boolean   @default(false)
  isHidden     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  deletedAt    DateTime?

  category            Category             @relation(fields: [categoryId], references: [id])
  store               Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customizationGroups CustomizationGroup[]

  activeOrderChunkItems ActiveOrderChunkItem[]
  orderItems            OrderItem[]
  cartItems             CartItem[]

  @@index([storeId, categoryId, sortOrder])
  @@index([deletedAt])
}

model CustomizationGroup {
  id                   String                @id @default(uuid(7))
  name                 String
  minSelectable        Int                   @default(0)
  maxSelectable        Int                   @default(1)
  menuItemId           String
  menuItem             MenuItem              @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  customizationOptions CustomizationOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([menuItemId])
}

model CustomizationOption {
  id                   String   @id @default(uuid(7))
  name                 String
  additionalPrice      Decimal? @db.Decimal(10, 2)
  customizationGroupId String

  customizationGroup CustomizationGroup @relation(fields: [customizationGroupId], references: [id], onDelete: Cascade)

  orderItemCustomizations OrderItemCustomization[]

  activeOrderChunkItems ActiveOrderChunkItem[]
  cartItems             CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([customizationGroupId])
}

model Table {
  id            String              @id @default(uuid(7))
  storeId       String
  name          String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  store         Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  activeSession ActiveTableSession?

  @@unique([storeId, name])
  @@index([storeId, name])
}

model ActiveTableSession {
  id        String   @id @default(uuid(7))
  storeId   String
  tableId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  store            Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  table            Table             @relation(fields: [tableId], references: [id], onDelete: Cascade)
  activeOrder      ActiveOrder?
  customerRequests CustomerRequest[]
  cart             Cart?

  @@index([storeId, createdAt])
  @@index([tableId])
  @@index([createdAt])
}

model Cart {
  id                   String             @id @default(uuid(7))
  activeTableSessionId String             @unique
  activeTableSession   ActiveTableSession @relation(fields: [activeTableSessionId], references: [id], onDelete: Cascade)
  items                CartItem[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
}

model CartItem {
  id         String   @id @default(uuid(7))
  cartId     String
  menuItemId String?
  quantity   Int
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  cart            Cart                  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  menuItem        MenuItem?             @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  selectedOptions CustomizationOption[]

  @@index([cartId])
  @@index([menuItemId])
}

model CustomerRequest {
  id                   String                @id @default(uuid(7))
  activeTableSessionId String
  requestType          CustomerRequestType
  status               CustomerRequestStatus @default(PENDING)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  activeTableSession ActiveTableSession @relation(fields: [activeTableSessionId], references: [id], onDelete: Cascade)

  @@index([activeTableSessionId, status])
}

model ActiveOrder {
  id                   String             @id @default(uuid(7))
  activeTableSessionId String             @unique
  activeTableSession   ActiveTableSession @relation(fields: [activeTableSessionId], references: [id], onDelete: Cascade)

  chunks    ActiveOrderChunk[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
}

model ActiveOrderChunk {
  id            String                 @id @default(uuid(7))
  activeOrderId String
  activeOrder   ActiveOrder            @relation(fields: [activeOrderId], references: [id], onDelete: Cascade)
  chunkItems    ActiveOrderChunkItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([activeOrderId])
}

model ActiveOrderChunkItem {
  id                 String            @id @default(uuid(7))
  activeOrderChunkId String
  menuItemId         String?
  quantity           Int               @default(1)
  notes              String?
  status             PreparationStatus @default(PENDING)

  activeOrderChunk ActiveOrderChunk      @relation(fields: [activeOrderChunkId], references: [id], onDelete: Cascade)
  menuItem         MenuItem?             @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  selectedOptions  CustomizationOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([activeOrderChunkId])
  @@index([menuItemId])
  @@index([activeOrderChunkId, status])
}

model Order {
  id        String    @id @default(uuid(7))
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Restrict)
  tableName String
  paidAt    DateTime?

  subTotal                  Decimal  @default(0) @db.Decimal(10, 2)
  vatRateSnapshot           Decimal? @db.Decimal(4, 3)
  serviceChargeRateSnapshot Decimal? @db.Decimal(4, 3)
  vatAmount                 Decimal  @default(0) @db.Decimal(10, 2)
  serviceChargeAmount       Decimal  @default(0) @db.Decimal(10, 2)
  grandTotal                Decimal  @default(0) @db.Decimal(10, 2)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId, createdAt])
  @@index([storeId, paidAt])
}

model OrderItem {
  id         String   @id @default(uuid(7))
  orderId    String
  menuItemId String?
  price      Decimal  @db.Decimal(10, 2)
  quantity   Int      @default(1)
  finalPrice Decimal? @db.Decimal(10, 2)
  notes      String?

  order          Order                    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem       MenuItem?                @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  customizations OrderItemCustomization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId])
  @@index([menuItemId])
}

model OrderItemCustomization {
  id                    String   @id @default(uuid(7))
  orderItemId           String
  customizationOptionId String
  finalPrice            Decimal? @db.Decimal(10, 2)

  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  customizationOption CustomizationOption @relation(fields: [customizationOptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([orderItemId, customizationOptionId])
}

enum Role {
  OWNER
  ADMIN
  CHEF
  CASHIER
  SERVER
}

enum PreparationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum CustomerRequestType {
  CALL_STAFF
  REQUEST_BILL
}

enum CustomerRequestStatus {
  PENDING
  RESOLVED
}

enum Currency {
  THB
  MMK
  USD
  EUR
  JPY
  CNY
  SGD
  HKD
}
